// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "myTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapEntry_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_myTest_2eproto() {
  protobuf_AddDesc_myTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "myTest.proto");
  GOOGLE_CHECK(file != NULL);
  MapEntry_descriptor_ = file->message_type(0);
  static const int MapEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, fieldname__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, fieldtype__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, intval__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, doubleval__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, timestampval__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, boolval__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, byteval__),
  };
  MapEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapEntry_descriptor_,
      MapEntry::default_instance_,
      MapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _internal_metadata_),
      -1);
  MapEntry_Type_descriptor_ = MapEntry_descriptor_->enum_type(0);
  FieldMap_descriptor_ = file->message_type(1);
  static const int FieldMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMap, entries__),
  };
  FieldMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldMap_descriptor_,
      FieldMap::default_instance_,
      FieldMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMap, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_myTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapEntry_descriptor_, &MapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldMap_descriptor_, &FieldMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_myTest_2eproto() {
  delete MapEntry::default_instance_;
  delete MapEntry_reflection_;
  delete FieldMap::default_instance_;
  delete FieldMap_reflection_;
}

void protobuf_AddDesc_myTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014myTest.proto\"\360\001\n\010MapEntry\022\022\n\nfieldName"
    "_\030\001 \002(\t\022\"\n\nfieldType_\030\002 \002(\0162\016.MapEntry.T"
    "ype\022\017\n\007intVal_\030\003 \001(\003\022\022\n\ndoubleVal_\030\004 \001(\001"
    "\022\025\n\rtimestampVal_\030\005 \001(\004\022\020\n\010boolVal_\030\006 \001("
    "\010\022\020\n\010byteVal_\030\007 \001(\014\"L\n\004Type\022\013\n\007UNKNOWN\020\000"
    "\022\010\n\004BOOL\020\001\022\007\n\003INT\020\002\022\t\n\005FLOAT\020\003\022\r\n\tTIMEST"
    "AMP\020\004\022\n\n\006BINARY\020\005\"\'\n\010FieldMap\022\033\n\010entries"
    "_\030\001 \003(\0132\t.MapEntryB\003\370\001\001", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "myTest.proto", &protobuf_RegisterTypes);
  MapEntry::default_instance_ = new MapEntry();
  FieldMap::default_instance_ = new FieldMap();
  MapEntry::default_instance_->InitAsDefaultInstance();
  FieldMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_myTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_myTest_2eproto {
  StaticDescriptorInitializer_myTest_2eproto() {
    protobuf_AddDesc_myTest_2eproto();
  }
} static_descriptor_initializer_myTest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapEntry_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapEntry_Type_descriptor_;
}
bool MapEntry_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapEntry_Type MapEntry::UNKNOWN;
const MapEntry_Type MapEntry::BOOL;
const MapEntry_Type MapEntry::INT;
const MapEntry_Type MapEntry::FLOAT;
const MapEntry_Type MapEntry::TIMESTAMP;
const MapEntry_Type MapEntry::BINARY;
const MapEntry_Type MapEntry::Type_MIN;
const MapEntry_Type MapEntry::Type_MAX;
const int MapEntry::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapEntry::kFieldNameFieldNumber;
const int MapEntry::kFieldTypeFieldNumber;
const int MapEntry::kIntValFieldNumber;
const int MapEntry::kDoubleValFieldNumber;
const int MapEntry::kTimestampValFieldNumber;
const int MapEntry::kBoolValFieldNumber;
const int MapEntry::kByteValFieldNumber;
#endif  // !_MSC_VER

MapEntry::MapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapEntry)
}

MapEntry::MapEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MapEntry)
}

void MapEntry::InitAsDefaultInstance() {
}

MapEntry::MapEntry(const MapEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapEntry)
}

void MapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fieldname__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fieldtype__ = 0;
  intval__ = GOOGLE_LONGLONG(0);
  doubleval__ = 0;
  timestampval__ = GOOGLE_ULONGLONG(0);
  boolval__ = false;
  byteval__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapEntry::~MapEntry() {
  // @@protoc_insertion_point(destructor:MapEntry)
  SharedDtor();
}

void MapEntry::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  fieldname__.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  byteval__.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void MapEntry::ArenaDtor(void* object) {
  MapEntry* _this = reinterpret_cast< MapEntry* >(object);
  (void)_this;
}
void MapEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapEntry_descriptor_;
}

const MapEntry& MapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myTest_2eproto();
  return *default_instance_;
}

MapEntry* MapEntry::default_instance_ = NULL;

MapEntry* MapEntry::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MapEntry>(arena);
}

void MapEntry::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MapEntry*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(intval__, timestampval__);
    if (has_fieldname_()) {
      fieldname__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (has_byteval_()) {
      byteval__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fieldName_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldname_().data(), this->fieldname_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MapEntry.fieldName_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fieldType_;
        break;
      }

      // required .MapEntry.Type fieldType_ = 2;
      case 2: {
        if (tag == 16) {
         parse_fieldType_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapEntry_Type_IsValid(value)) {
            set_fieldtype_(static_cast< ::MapEntry_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intVal_;
        break;
      }

      // optional int64 intVal_ = 3;
      case 3: {
        if (tag == 24) {
         parse_intVal_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intval__)));
          set_has_intval_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_doubleVal_;
        break;
      }

      // optional double doubleVal_ = 4;
      case 4: {
        if (tag == 33) {
         parse_doubleVal_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doubleval__)));
          set_has_doubleval_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestampVal_;
        break;
      }

      // optional uint64 timestampVal_ = 5;
      case 5: {
        if (tag == 40) {
         parse_timestampVal_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampval__)));
          set_has_timestampval_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_boolVal_;
        break;
      }

      // optional bool boolVal_ = 6;
      case 6: {
        if (tag == 48) {
         parse_boolVal_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolval__)));
          set_has_boolval_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_byteVal_;
        break;
      }

      // optional bytes byteVal_ = 7;
      case 7: {
        if (tag == 58) {
         parse_byteVal_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byteval_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapEntry)
  return false;
#undef DO_
}

void MapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapEntry)
  // required string fieldName_ = 1;
  if (has_fieldname_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldname_().data(), this->fieldname_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MapEntry.fieldName_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldname_(), output);
  }

  // required .MapEntry.Type fieldType_ = 2;
  if (has_fieldtype_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fieldtype_(), output);
  }

  // optional int64 intVal_ = 3;
  if (has_intval_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->intval_(), output);
  }

  // optional double doubleVal_ = 4;
  if (has_doubleval_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->doubleval_(), output);
  }

  // optional uint64 timestampVal_ = 5;
  if (has_timestampval_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestampval_(), output);
  }

  // optional bool boolVal_ = 6;
  if (has_boolval_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->boolval_(), output);
  }

  // optional bytes byteVal_ = 7;
  if (has_byteval_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->byteval_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapEntry)
}

::google::protobuf::uint8* MapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapEntry)
  // required string fieldName_ = 1;
  if (has_fieldname_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldname_().data(), this->fieldname_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MapEntry.fieldName_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldname_(), target);
  }

  // required .MapEntry.Type fieldType_ = 2;
  if (has_fieldtype_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fieldtype_(), target);
  }

  // optional int64 intVal_ = 3;
  if (has_intval_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->intval_(), target);
  }

  // optional double doubleVal_ = 4;
  if (has_doubleval_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->doubleval_(), target);
  }

  // optional uint64 timestampVal_ = 5;
  if (has_timestampval_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestampval_(), target);
  }

  // optional bool boolVal_ = 6;
  if (has_boolval_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->boolval_(), target);
  }

  // optional bytes byteVal_ = 7;
  if (has_byteval_()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->byteval_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapEntry)
  return target;
}

int MapEntry::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_fieldname_()) {
    // required string fieldName_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fieldname_());
  }

  if (has_fieldtype_()) {
    // required .MapEntry.Type fieldType_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fieldtype_());
  }

  return total_size;
}
int MapEntry::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string fieldName_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fieldname_());

    // required .MapEntry.Type fieldType_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fieldtype_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124u) {
    // optional int64 intVal_ = 3;
    if (has_intval_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intval_());
    }

    // optional double doubleVal_ = 4;
    if (has_doubleval_()) {
      total_size += 1 + 8;
    }

    // optional uint64 timestampVal_ = 5;
    if (has_timestampval_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampval_());
    }

    // optional bool boolVal_ = 6;
    if (has_boolval_()) {
      total_size += 1 + 1;
    }

    // optional bytes byteVal_ = 7;
    if (has_byteval_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byteval_());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MapEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapEntry>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapEntry::MergeFrom(const MapEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldname_()) {
      set_fieldname_(from.fieldname_());
    }
    if (from.has_fieldtype_()) {
      set_fieldtype_(from.fieldtype_());
    }
    if (from.has_intval_()) {
      set_intval_(from.intval_());
    }
    if (from.has_doubleval_()) {
      set_doubleval_(from.doubleval_());
    }
    if (from.has_timestampval_()) {
      set_timestampval_(from.timestampval_());
    }
    if (from.has_boolval_()) {
      set_boolval_(from.boolval_());
    }
    if (from.has_byteval_()) {
      set_byteval_(from.byteval_());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntry::CopyFrom(const MapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapEntry::Swap(MapEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapEntry temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MapEntry::UnsafeArenaSwap(MapEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapEntry::InternalSwap(MapEntry* other) {
  fieldname__.Swap(&other->fieldname__);
  std::swap(fieldtype__, other->fieldtype__);
  std::swap(intval__, other->intval__);
  std::swap(doubleval__, other->doubleval__);
  std::swap(timestampval__, other->timestampval__);
  std::swap(boolval__, other->boolval__);
  byteval__.Swap(&other->byteval__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapEntry_descriptor_;
  metadata.reflection = MapEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapEntry

// required string fieldName_ = 1;
bool MapEntry::has_fieldname_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapEntry::set_has_fieldname_() {
  _has_bits_[0] |= 0x00000001u;
}
void MapEntry::clear_has_fieldname_() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapEntry::clear_fieldname_() {
  fieldname__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fieldname_();
}
 const ::std::string& MapEntry::fieldname_() const {
  // @@protoc_insertion_point(field_get:MapEntry.fieldName_)
  return fieldname__.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapEntry::set_fieldname_(const ::std::string& value) {
  set_has_fieldname_();
  fieldname__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:MapEntry.fieldName_)
}
 void MapEntry::set_fieldname_(const char* value) {
  set_has_fieldname_();
  fieldname__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:MapEntry.fieldName_)
}
 void MapEntry::set_fieldname_(const char* value,
    size_t size) {
  set_has_fieldname_();
  fieldname__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:MapEntry.fieldName_)
}
 ::std::string* MapEntry::mutable_fieldname_() {
  set_has_fieldname_();
  // @@protoc_insertion_point(field_mutable:MapEntry.fieldName_)
  return fieldname__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* MapEntry::release_fieldname_() {
  clear_has_fieldname_();
  return fieldname__.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* MapEntry::unsafe_arena_release_fieldname_() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fieldname_();
  return fieldname__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void MapEntry::set_allocated_fieldname_(::std::string* fieldname_) {
  if (fieldname_ != NULL) {
    set_has_fieldname_();
  } else {
    clear_has_fieldname_();
  }
  fieldname__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldname_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.fieldName_)
}
 void MapEntry::unsafe_arena_set_allocated_fieldname_(
    ::std::string* fieldname_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fieldname_ != NULL) {
    set_has_fieldname_();
  } else {
    clear_has_fieldname_();
  }
  fieldname__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fieldname_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.fieldName_)
}

// required .MapEntry.Type fieldType_ = 2;
bool MapEntry::has_fieldtype_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapEntry::set_has_fieldtype_() {
  _has_bits_[0] |= 0x00000002u;
}
void MapEntry::clear_has_fieldtype_() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapEntry::clear_fieldtype_() {
  fieldtype__ = 0;
  clear_has_fieldtype_();
}
 ::MapEntry_Type MapEntry::fieldtype_() const {
  // @@protoc_insertion_point(field_get:MapEntry.fieldType_)
  return static_cast< ::MapEntry_Type >(fieldtype__);
}
 void MapEntry::set_fieldtype_(::MapEntry_Type value) {
  assert(::MapEntry_Type_IsValid(value));
  set_has_fieldtype_();
  fieldtype__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.fieldType_)
}

// optional int64 intVal_ = 3;
bool MapEntry::has_intval_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapEntry::set_has_intval_() {
  _has_bits_[0] |= 0x00000004u;
}
void MapEntry::clear_has_intval_() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapEntry::clear_intval_() {
  intval__ = GOOGLE_LONGLONG(0);
  clear_has_intval_();
}
 ::google::protobuf::int64 MapEntry::intval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.intVal_)
  return intval__;
}
 void MapEntry::set_intval_(::google::protobuf::int64 value) {
  set_has_intval_();
  intval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.intVal_)
}

// optional double doubleVal_ = 4;
bool MapEntry::has_doubleval_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MapEntry::set_has_doubleval_() {
  _has_bits_[0] |= 0x00000008u;
}
void MapEntry::clear_has_doubleval_() {
  _has_bits_[0] &= ~0x00000008u;
}
void MapEntry::clear_doubleval_() {
  doubleval__ = 0;
  clear_has_doubleval_();
}
 double MapEntry::doubleval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.doubleVal_)
  return doubleval__;
}
 void MapEntry::set_doubleval_(double value) {
  set_has_doubleval_();
  doubleval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.doubleVal_)
}

// optional uint64 timestampVal_ = 5;
bool MapEntry::has_timestampval_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MapEntry::set_has_timestampval_() {
  _has_bits_[0] |= 0x00000010u;
}
void MapEntry::clear_has_timestampval_() {
  _has_bits_[0] &= ~0x00000010u;
}
void MapEntry::clear_timestampval_() {
  timestampval__ = GOOGLE_ULONGLONG(0);
  clear_has_timestampval_();
}
 ::google::protobuf::uint64 MapEntry::timestampval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.timestampVal_)
  return timestampval__;
}
 void MapEntry::set_timestampval_(::google::protobuf::uint64 value) {
  set_has_timestampval_();
  timestampval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.timestampVal_)
}

// optional bool boolVal_ = 6;
bool MapEntry::has_boolval_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MapEntry::set_has_boolval_() {
  _has_bits_[0] |= 0x00000020u;
}
void MapEntry::clear_has_boolval_() {
  _has_bits_[0] &= ~0x00000020u;
}
void MapEntry::clear_boolval_() {
  boolval__ = false;
  clear_has_boolval_();
}
 bool MapEntry::boolval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.boolVal_)
  return boolval__;
}
 void MapEntry::set_boolval_(bool value) {
  set_has_boolval_();
  boolval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.boolVal_)
}

// optional bytes byteVal_ = 7;
bool MapEntry::has_byteval_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MapEntry::set_has_byteval_() {
  _has_bits_[0] |= 0x00000040u;
}
void MapEntry::clear_has_byteval_() {
  _has_bits_[0] &= ~0x00000040u;
}
void MapEntry::clear_byteval_() {
  byteval__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_byteval_();
}
 const ::std::string& MapEntry::byteval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.byteVal_)
  return byteval__.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapEntry::set_byteval_(const ::std::string& value) {
  set_has_byteval_();
  byteval__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:MapEntry.byteVal_)
}
 void MapEntry::set_byteval_(const char* value) {
  set_has_byteval_();
  byteval__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:MapEntry.byteVal_)
}
 void MapEntry::set_byteval_(const void* value,
    size_t size) {
  set_has_byteval_();
  byteval__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:MapEntry.byteVal_)
}
 ::std::string* MapEntry::mutable_byteval_() {
  set_has_byteval_();
  // @@protoc_insertion_point(field_mutable:MapEntry.byteVal_)
  return byteval__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* MapEntry::release_byteval_() {
  clear_has_byteval_();
  return byteval__.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* MapEntry::unsafe_arena_release_byteval_() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_byteval_();
  return byteval__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void MapEntry::set_allocated_byteval_(::std::string* byteval_) {
  if (byteval_ != NULL) {
    set_has_byteval_();
  } else {
    clear_has_byteval_();
  }
  byteval__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byteval_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.byteVal_)
}
 void MapEntry::unsafe_arena_set_allocated_byteval_(
    ::std::string* byteval_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (byteval_ != NULL) {
    set_has_byteval_();
  } else {
    clear_has_byteval_();
  }
  byteval__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      byteval_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.byteVal_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FieldMap::kEntriesFieldNumber;
#endif  // !_MSC_VER

FieldMap::FieldMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FieldMap)
}

FieldMap::FieldMap(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  entries__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FieldMap)
}

void FieldMap::InitAsDefaultInstance() {
}

FieldMap::FieldMap(const FieldMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FieldMap)
}

void FieldMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldMap::~FieldMap() {
  // @@protoc_insertion_point(destructor:FieldMap)
  SharedDtor();
}

void FieldMap::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void FieldMap::ArenaDtor(void* object) {
  FieldMap* _this = reinterpret_cast< FieldMap* >(object);
  (void)_this;
}
void FieldMap::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FieldMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldMap_descriptor_;
}

const FieldMap& FieldMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myTest_2eproto();
  return *default_instance_;
}

FieldMap* FieldMap::default_instance_ = NULL;

FieldMap* FieldMap::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FieldMap>(arena);
}

void FieldMap::Clear() {
  entries__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FieldMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapEntry entries_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_entries_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FieldMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FieldMap)
  return false;
#undef DO_
}

void FieldMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FieldMap)
  // repeated .MapEntry entries_ = 1;
  for (unsigned int i = 0, n = this->entries__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries_(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FieldMap)
}

::google::protobuf::uint8* FieldMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FieldMap)
  // repeated .MapEntry entries_ = 1;
  for (unsigned int i = 0, n = this->entries__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries_(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FieldMap)
  return target;
}

int FieldMap::ByteSize() const {
  int total_size = 0;

  // repeated .MapEntry entries_ = 1;
  total_size += 1 * this->entries__size();
  for (int i = 0; i < this->entries__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries_(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMap::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FieldMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMap>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldMap::MergeFrom(const FieldMap& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entries__.MergeFrom(from.entries__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMap::CopyFrom(const FieldMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMap::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries_())) return false;
  return true;
}

void FieldMap::Swap(FieldMap* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FieldMap temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void FieldMap::UnsafeArenaSwap(FieldMap* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FieldMap::InternalSwap(FieldMap* other) {
  entries__.UnsafeArenaSwap(&other->entries__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldMap_descriptor_;
  metadata.reflection = FieldMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMap

// repeated .MapEntry entries_ = 1;
int FieldMap::entries__size() const {
  return entries__.size();
}
void FieldMap::clear_entries_() {
  entries__.Clear();
}
const ::MapEntry& FieldMap::entries_(int index) const {
  // @@protoc_insertion_point(field_get:FieldMap.entries_)
  return entries__.Get(index);
}
::MapEntry* FieldMap::mutable_entries_(int index) {
  // @@protoc_insertion_point(field_mutable:FieldMap.entries_)
  return entries__.Mutable(index);
}
::MapEntry* FieldMap::add_entries_() {
  // @@protoc_insertion_point(field_add:FieldMap.entries_)
  return entries__.Add();
}
::google::protobuf::RepeatedPtrField< ::MapEntry >*
FieldMap::mutable_entries_() {
  // @@protoc_insertion_point(field_mutable_list:FieldMap.entries_)
  return &entries__;
}
const ::google::protobuf::RepeatedPtrField< ::MapEntry >&
FieldMap::entries_() const {
  // @@protoc_insertion_point(field_list:FieldMap.entries_)
  return entries__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
