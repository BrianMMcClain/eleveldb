// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myTest.proto

#ifndef PROTOBUF_myTest_2eproto__INCLUDED
#define PROTOBUF_myTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_myTest_2eproto();
void protobuf_AssignDesc_myTest_2eproto();
void protobuf_ShutdownFile_myTest_2eproto();

class FieldMap;
class MapEntry;

enum MapEntry_Type {
  MapEntry_Type_UNKNOWN = 0,
  MapEntry_Type_BOOL = 1,
  MapEntry_Type_INT = 2,
  MapEntry_Type_FLOAT = 3,
  MapEntry_Type_TIMESTAMP = 4,
  MapEntry_Type_BINARY = 5
};
bool MapEntry_Type_IsValid(int value);
const MapEntry_Type MapEntry_Type_Type_MIN = MapEntry_Type_UNKNOWN;
const MapEntry_Type MapEntry_Type_Type_MAX = MapEntry_Type_BINARY;
const int MapEntry_Type_Type_ARRAYSIZE = MapEntry_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapEntry_Type_descriptor();
inline const ::std::string& MapEntry_Type_Name(MapEntry_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapEntry_Type_descriptor(), value);
}
inline bool MapEntry_Type_Parse(
    const ::std::string& name, MapEntry_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapEntry_Type>(
    MapEntry_Type_descriptor(), name, value);
}
// ===================================================================

class MapEntry : public ::google::protobuf::Message {
 public:
  MapEntry();
  virtual ~MapEntry();

  MapEntry(const MapEntry& from);

  inline MapEntry& operator=(const MapEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapEntry& default_instance();

  void UnsafeArenaSwap(MapEntry* other);
  void Swap(MapEntry* other);

  // implements Message ----------------------------------------------

  inline MapEntry* New() const { return New(NULL); }

  MapEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapEntry& from);
  void MergeFrom(const MapEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapEntry* other);
  protected:
  explicit MapEntry(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MapEntry_Type Type;
  static const Type UNKNOWN = MapEntry_Type_UNKNOWN;
  static const Type BOOL = MapEntry_Type_BOOL;
  static const Type INT = MapEntry_Type_INT;
  static const Type FLOAT = MapEntry_Type_FLOAT;
  static const Type TIMESTAMP = MapEntry_Type_TIMESTAMP;
  static const Type BINARY = MapEntry_Type_BINARY;
  static inline bool Type_IsValid(int value) {
    return MapEntry_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MapEntry_Type_Type_MIN;
  static const Type Type_MAX =
    MapEntry_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MapEntry_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MapEntry_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MapEntry_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MapEntry_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string fieldName_ = 1;
  bool has_fieldname_() const;
  void clear_fieldname_();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& fieldname_() const;
  void set_fieldname_(const ::std::string& value);
  void set_fieldname_(const char* value);
  void set_fieldname_(const char* value, size_t size);
  ::std::string* mutable_fieldname_();
  ::std::string* release_fieldname_();
  void set_allocated_fieldname_(::std::string* fieldname_);
  ::std::string* unsafe_arena_release_fieldname_();
  void unsafe_arena_set_allocated_fieldname_(
      ::std::string* fieldname_);

  // required .MapEntry.Type fieldType_ = 2;
  bool has_fieldtype_() const;
  void clear_fieldtype_();
  static const int kFieldTypeFieldNumber = 2;
  ::MapEntry_Type fieldtype_() const;
  void set_fieldtype_(::MapEntry_Type value);

  // optional int64 intVal_ = 3;
  bool has_intval_() const;
  void clear_intval_();
  static const int kIntValFieldNumber = 3;
  ::google::protobuf::int64 intval_() const;
  void set_intval_(::google::protobuf::int64 value);

  // optional double doubleVal_ = 4;
  bool has_doubleval_() const;
  void clear_doubleval_();
  static const int kDoubleValFieldNumber = 4;
  double doubleval_() const;
  void set_doubleval_(double value);

  // optional uint64 timestampVal_ = 5;
  bool has_timestampval_() const;
  void clear_timestampval_();
  static const int kTimestampValFieldNumber = 5;
  ::google::protobuf::uint64 timestampval_() const;
  void set_timestampval_(::google::protobuf::uint64 value);

  // optional bool boolVal_ = 6;
  bool has_boolval_() const;
  void clear_boolval_();
  static const int kBoolValFieldNumber = 6;
  bool boolval_() const;
  void set_boolval_(bool value);

  // optional bytes byteVal_ = 7;
  bool has_byteval_() const;
  void clear_byteval_();
  static const int kByteValFieldNumber = 7;
  const ::std::string& byteval_() const;
  void set_byteval_(const ::std::string& value);
  void set_byteval_(const char* value);
  void set_byteval_(const void* value, size_t size);
  ::std::string* mutable_byteval_();
  ::std::string* release_byteval_();
  void set_allocated_byteval_(::std::string* byteval_);
  ::std::string* unsafe_arena_release_byteval_();
  void unsafe_arena_set_allocated_byteval_(
      ::std::string* byteval_);

  // @@protoc_insertion_point(class_scope:MapEntry)
 private:
  inline void set_has_fieldname_();
  inline void clear_has_fieldname_();
  inline void set_has_fieldtype_();
  inline void clear_has_fieldtype_();
  inline void set_has_intval_();
  inline void clear_has_intval_();
  inline void set_has_doubleval_();
  inline void clear_has_doubleval_();
  inline void set_has_timestampval_();
  inline void clear_has_timestampval_();
  inline void set_has_boolval_();
  inline void clear_has_boolval_();
  inline void set_has_byteval_();
  inline void clear_has_byteval_();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fieldname__;
  ::google::protobuf::int64 intval__;
  double doubleval__;
  int fieldtype__;
  bool boolval__;
  ::google::protobuf::uint64 timestampval__;
  ::google::protobuf::internal::ArenaStringPtr byteval__;
  friend void  protobuf_AddDesc_myTest_2eproto();
  friend void protobuf_AssignDesc_myTest_2eproto();
  friend void protobuf_ShutdownFile_myTest_2eproto();

  void InitAsDefaultInstance();
  static MapEntry* default_instance_;
};
// -------------------------------------------------------------------

class FieldMap : public ::google::protobuf::Message {
 public:
  FieldMap();
  virtual ~FieldMap();

  FieldMap(const FieldMap& from);

  inline FieldMap& operator=(const FieldMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldMap& default_instance();

  void UnsafeArenaSwap(FieldMap* other);
  void Swap(FieldMap* other);

  // implements Message ----------------------------------------------

  inline FieldMap* New() const { return New(NULL); }

  FieldMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldMap& from);
  void MergeFrom(const FieldMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldMap* other);
  protected:
  explicit FieldMap(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MapEntry entries_ = 1;
  int entries__size() const;
  void clear_entries_();
  static const int kEntriesFieldNumber = 1;
  const ::MapEntry& entries_(int index) const;
  ::MapEntry* mutable_entries_(int index);
  ::MapEntry* add_entries_();
  ::google::protobuf::RepeatedPtrField< ::MapEntry >*
      mutable_entries_();
  const ::google::protobuf::RepeatedPtrField< ::MapEntry >&
      entries_() const;

  // @@protoc_insertion_point(class_scope:FieldMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MapEntry > entries__;
  friend void  protobuf_AddDesc_myTest_2eproto();
  friend void protobuf_AssignDesc_myTest_2eproto();
  friend void protobuf_ShutdownFile_myTest_2eproto();

  void InitAsDefaultInstance();
  static FieldMap* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MapEntry

// required string fieldName_ = 1;
inline bool MapEntry::has_fieldname_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapEntry::set_has_fieldname_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapEntry::clear_has_fieldname_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapEntry::clear_fieldname_() {
  fieldname__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_fieldname_();
}
inline const ::std::string& MapEntry::fieldname_() const {
  // @@protoc_insertion_point(field_get:MapEntry.fieldName_)
  return fieldname__.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapEntry::set_fieldname_(const ::std::string& value) {
  set_has_fieldname_();
  fieldname__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:MapEntry.fieldName_)
}
inline void MapEntry::set_fieldname_(const char* value) {
  set_has_fieldname_();
  fieldname__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:MapEntry.fieldName_)
}
inline void MapEntry::set_fieldname_(const char* value,
    size_t size) {
  set_has_fieldname_();
  fieldname__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:MapEntry.fieldName_)
}
inline ::std::string* MapEntry::mutable_fieldname_() {
  set_has_fieldname_();
  // @@protoc_insertion_point(field_mutable:MapEntry.fieldName_)
  return fieldname__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MapEntry::release_fieldname_() {
  clear_has_fieldname_();
  return fieldname__.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MapEntry::unsafe_arena_release_fieldname_() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_fieldname_();
  return fieldname__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MapEntry::set_allocated_fieldname_(::std::string* fieldname_) {
  if (fieldname_ != NULL) {
    set_has_fieldname_();
  } else {
    clear_has_fieldname_();
  }
  fieldname__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldname_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.fieldName_)
}
inline void MapEntry::unsafe_arena_set_allocated_fieldname_(
    ::std::string* fieldname_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fieldname_ != NULL) {
    set_has_fieldname_();
  } else {
    clear_has_fieldname_();
  }
  fieldname__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fieldname_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.fieldName_)
}

// required .MapEntry.Type fieldType_ = 2;
inline bool MapEntry::has_fieldtype_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapEntry::set_has_fieldtype_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapEntry::clear_has_fieldtype_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapEntry::clear_fieldtype_() {
  fieldtype__ = 0;
  clear_has_fieldtype_();
}
inline ::MapEntry_Type MapEntry::fieldtype_() const {
  // @@protoc_insertion_point(field_get:MapEntry.fieldType_)
  return static_cast< ::MapEntry_Type >(fieldtype__);
}
inline void MapEntry::set_fieldtype_(::MapEntry_Type value) {
  assert(::MapEntry_Type_IsValid(value));
  set_has_fieldtype_();
  fieldtype__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.fieldType_)
}

// optional int64 intVal_ = 3;
inline bool MapEntry::has_intval_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapEntry::set_has_intval_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapEntry::clear_has_intval_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapEntry::clear_intval_() {
  intval__ = GOOGLE_LONGLONG(0);
  clear_has_intval_();
}
inline ::google::protobuf::int64 MapEntry::intval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.intVal_)
  return intval__;
}
inline void MapEntry::set_intval_(::google::protobuf::int64 value) {
  set_has_intval_();
  intval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.intVal_)
}

// optional double doubleVal_ = 4;
inline bool MapEntry::has_doubleval_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapEntry::set_has_doubleval_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapEntry::clear_has_doubleval_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapEntry::clear_doubleval_() {
  doubleval__ = 0;
  clear_has_doubleval_();
}
inline double MapEntry::doubleval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.doubleVal_)
  return doubleval__;
}
inline void MapEntry::set_doubleval_(double value) {
  set_has_doubleval_();
  doubleval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.doubleVal_)
}

// optional uint64 timestampVal_ = 5;
inline bool MapEntry::has_timestampval_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapEntry::set_has_timestampval_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapEntry::clear_has_timestampval_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapEntry::clear_timestampval_() {
  timestampval__ = GOOGLE_ULONGLONG(0);
  clear_has_timestampval_();
}
inline ::google::protobuf::uint64 MapEntry::timestampval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.timestampVal_)
  return timestampval__;
}
inline void MapEntry::set_timestampval_(::google::protobuf::uint64 value) {
  set_has_timestampval_();
  timestampval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.timestampVal_)
}

// optional bool boolVal_ = 6;
inline bool MapEntry::has_boolval_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapEntry::set_has_boolval_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapEntry::clear_has_boolval_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapEntry::clear_boolval_() {
  boolval__ = false;
  clear_has_boolval_();
}
inline bool MapEntry::boolval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.boolVal_)
  return boolval__;
}
inline void MapEntry::set_boolval_(bool value) {
  set_has_boolval_();
  boolval__ = value;
  // @@protoc_insertion_point(field_set:MapEntry.boolVal_)
}

// optional bytes byteVal_ = 7;
inline bool MapEntry::has_byteval_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MapEntry::set_has_byteval_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MapEntry::clear_has_byteval_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MapEntry::clear_byteval_() {
  byteval__.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_byteval_();
}
inline const ::std::string& MapEntry::byteval_() const {
  // @@protoc_insertion_point(field_get:MapEntry.byteVal_)
  return byteval__.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapEntry::set_byteval_(const ::std::string& value) {
  set_has_byteval_();
  byteval__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:MapEntry.byteVal_)
}
inline void MapEntry::set_byteval_(const char* value) {
  set_has_byteval_();
  byteval__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:MapEntry.byteVal_)
}
inline void MapEntry::set_byteval_(const void* value,
    size_t size) {
  set_has_byteval_();
  byteval__.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:MapEntry.byteVal_)
}
inline ::std::string* MapEntry::mutable_byteval_() {
  set_has_byteval_();
  // @@protoc_insertion_point(field_mutable:MapEntry.byteVal_)
  return byteval__.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MapEntry::release_byteval_() {
  clear_has_byteval_();
  return byteval__.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MapEntry::unsafe_arena_release_byteval_() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_byteval_();
  return byteval__.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MapEntry::set_allocated_byteval_(::std::string* byteval_) {
  if (byteval_ != NULL) {
    set_has_byteval_();
  } else {
    clear_has_byteval_();
  }
  byteval__.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byteval_,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.byteVal_)
}
inline void MapEntry::unsafe_arena_set_allocated_byteval_(
    ::std::string* byteval_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (byteval_ != NULL) {
    set_has_byteval_();
  } else {
    clear_has_byteval_();
  }
  byteval__.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      byteval_, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MapEntry.byteVal_)
}

// -------------------------------------------------------------------

// FieldMap

// repeated .MapEntry entries_ = 1;
inline int FieldMap::entries__size() const {
  return entries__.size();
}
inline void FieldMap::clear_entries_() {
  entries__.Clear();
}
inline const ::MapEntry& FieldMap::entries_(int index) const {
  // @@protoc_insertion_point(field_get:FieldMap.entries_)
  return entries__.Get(index);
}
inline ::MapEntry* FieldMap::mutable_entries_(int index) {
  // @@protoc_insertion_point(field_mutable:FieldMap.entries_)
  return entries__.Mutable(index);
}
inline ::MapEntry* FieldMap::add_entries_() {
  // @@protoc_insertion_point(field_add:FieldMap.entries_)
  return entries__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MapEntry >*
FieldMap::mutable_entries_() {
  // @@protoc_insertion_point(field_mutable_list:FieldMap.entries_)
  return &entries__;
}
inline const ::google::protobuf::RepeatedPtrField< ::MapEntry >&
FieldMap::entries_() const {
  // @@protoc_insertion_point(field_list:FieldMap.entries_)
  return entries__;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MapEntry_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MapEntry_Type>() {
  return ::MapEntry_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_myTest_2eproto__INCLUDED
